/*----------------------------------------------------------

Author: Ashung Hung
Homepage: https://github.com/Ashung/Automate-Sketch
License: https://creativecommons.org/licenses/by-sa/4.0

----------------------------------------------------------*/

var onRun = function(context) {

    var doc = context.document;

    if (doc.artboards().count() > 0) {

        // Dialog
        var dialog = NSAlert.alloc().init();
        dialog.setMessageText("Export All Artboards to HTML");
        dialog.setInformativeText("Choose the image format.");
        dialog.addButtonWithTitle("OK");
        dialog.addButtonWithTitle("Cancel");

        // Radio buttons
        var buttonFormat = NSButtonCell.alloc().init();
            buttonFormat.setButtonType(NSRadioButton);
        var matrixFormat = NSMatrix.alloc().initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
            NSMakeRect(0, 0, 300, 50),
            NSRadioModeMatrix,
            buttonFormat,
            2,
            1
        );
        matrixFormat.setCellSize(CGSizeMake(300, 25));
        var cells = matrixFormat.cells();
            cells.objectAtIndex(0).setTitle("PNG, recommend for UI desigin.");
            cells.objectAtIndex(1).setTitle("SVG, recommend for icon design.");
        dialog.setAccessoryView(matrixFormat);

        var responseCode = dialog.runModal();
        if (responseCode == "1000") {

            if (doc.fileURL()) {
                var defaultLocation = doc.fileURL().URLByDeletingLastPathComponent();
            } else {
                var defaultLocation = NSURL.fileURLWithPath(NSHomeDirectory().stringByAppendingPathComponent("Desktop"));
            }

            var savePanel = NSOpenPanel.openPanel();
            savePanel.setMessage("Export All Artboards to ...");
            savePanel.setCanChooseDirectories(true);
            savePanel.setCanChooseFiles(false);
            savePanel.setCanCreateDirectories(true);
            savePanel.setDirectoryURL(defaultLocation);

            if (savePanel.runModal() == NSOKButton) {

                var htmlTemplate = getContentFromFile(context.plugin.urlForResourceNamed("Export_All_Artboars_to_HTML.html").path());
                var htmlContent = "";

                var selectedRadioIndex = matrixFormat.cells().indexOfObject(matrixFormat.selectedCell());

                switch (selectedRadioIndex) {
                    case 0:
                        var imageFormat = "png";
                        break;
                    case 1:
                        var imageFormat = "svg";
                        break;
                    default:
                        var imageFormat = "png";
                }

                var loopArtboards = doc.artboards().objectEnumerator();
                var artboard;
                while (artboard = loopArtboards.nextObject()) {

                    var name = rename(artboard.name());

                    // Add Slice
                    var slice = MSSliceLayer.alloc().init();
                    slice.setRect(CGRectMake(0, 0, artboard.frame().width(), artboard.frame().height()));

                    // Export options
                    slice.exportOptions().removeAllExportFormats();
                    var size = slice.exportOptions().addExportFormat();
                    size.setFileFormat(imageFormat);
                    size.setName("");
                    size.setScale([2]);
                    artboard.addLayers([slice]);

                    doc.saveArtboardOrSlice_toFile(slice, savePanel.URL().path() + "/assets/" + name + "." + imageFormat);

                    slice.removeFromParent();

                    // TODO: HTML
                    var imgWidth = artboard.frame().width();
                    var imgHeight = artboard.frame().height();
                    if (imageFormat == "png") {
                        imgWidth = Math.round(artboard.frame().width() / 2);
                        imgHeight = Math.round(artboard.frame().height() / 2);
                    }

                    htmlContent += '<li class="grid-item"><div class="image"><img alt="" src="assets/' + name + '.' + imageFormat + '" width="' + imgWidth + '" height="' + imgHeight + '"></div><div class="title">' + name + '</div></li>\n';

                }

                htmlTemplate = htmlTemplate.replace("{{content}}", htmlContent);

                writeContentToFile(savePanel.URL().path() + "/index.html", htmlTemplate);

                NSWorkspace.sharedWorkspace().selectFile_inFileViewerRootedAtPath(savePanel.URL().path(), nil);
            }
        }

    } else {
        doc.showMessage("Document have no any artboard.");
    }

}

function rename(name) {
    var newName = name.replace(/^\./, "_").replace(/[<>\\\|:""*\?]/g, "_").substring(0, 255);
    return newName;
}

function getContentFromFile(filePath) {
    var content = NSString.stringWithContentsOfFile_encoding_error_(
        filePath, NSUTF8StringEncoding, nil
    );
    return content;
}

function writeContentToFile(filePath, content) {
    content = NSString.stringWithFormat('%@', content);
    content.writeToFile_atomically_encoding_error_(
        filePath, true, NSUTF8StringEncoding, null
    );
}
