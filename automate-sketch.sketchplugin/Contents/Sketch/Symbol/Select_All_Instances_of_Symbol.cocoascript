/*----------------------------------------------------------

author: Ashung Hung
Homepage: https://github.com/Ashung/Automate-Sketch
license: CC-BY 4.0

----------------------------------------------------------*/

var onRun = function(context) {
    var doc = context.document;
    var selection = context.selection;
    var view = doc.currentView();

    if (selection.count() == 1 && (selection.firstObject().class() == "MSSymbolMaster" || selection.firstObject().class() == "MSSymbolInstance")) {
        if (selection.firstObject().class() == "MSSymbolMaster") {
            var symbolMaster = selection.firstObject();
        }
        if (selection.firstObject().class() == "MSSymbolInstance") {
            var symbolMaster = selection.firstObject().symbolMaster();
        }

        if (symbolMaster.hasInstances()) {
            var pagesHasInstances = [];
            var pagesName = [];
            for (var i = 0; i < doc.pages().count(); i++) {
                var page = doc.pages().objectAtIndex(i);
                var allSymbolInstances = page.allSymbolInstancesInChildren().allObjects();

                // Count
                var instancesInCurretPage = 0;
                for (var j = 0; j < allSymbolInstances.count(); j ++) {
                    if (allSymbolInstances.objectAtIndex(j).symbolMaster().symbolID() == symbolMaster.symbolID()) {
                        instancesInCurretPage ++;
                    }
                }

                for (var j = 0; j < allSymbolInstances.count(); j ++) {
                    if (
                        allSymbolInstances.objectAtIndex(j).symbolMaster().symbolID() == symbolMaster.symbolID()
                        &&
                        pagesHasInstances.indexOf(page) == -1
                    ) {
                        pagesHasInstances.push(page);
                        pagesName.push(page.name() + " (" + instancesInCurretPage + ")");
                    }
                }
            }

            var accessory = NSComboBox.alloc().initWithFrame(NSMakeRect(0, 0, 240, 28));
                accessory.addItemsWithObjectValues(pagesName);
                accessory.selectItemAtIndex(0);

            var alert = NSAlert.alloc().init();
                alert.setMessageText("Pages that contain symbol \"" + symbolMaster.name() + "\".\nClick OK to select all instances in selected page.");
                alert.addButtonWithTitle("OK");
                alert.addButtonWithTitle("Cancel");
                alert.setAccessoryView(accessory);

            var responseCode = alert.runModal();
            var selectPage = accessory.indexOfSelectedItem();
            if (responseCode == 1000) {
                // go to page
                var currentPage = pagesHasInstances[selectPage];
                // doc.setCurrentPage(currentPage);

                currentPage.deselectAllLayers();

                // Select all instances
                // var allSymbolInstancesInCurrentPage = currentPage.allSymbolInstancesInChildren().allObjects();
                // for (var i = 0; i < allSymbolInstancesInCurrentPage.count(); i ++) {
                //     var instance = allSymbolInstancesInCurrentPage.objectAtIndex(i);
                //
                //     if (instance.symbolMaster().symbolID() == symbolMaster.symbolID()) {
                //         instance.select_byExpandingSelection(true, true);
                //         // if instance is invisible make it visible.
                //         if (instance.isVisible() == false) {
                //             instance.setIsVisible(true);
                //         }
                //     }
                //
                // }

                for (var i = 0; i < currentPage.children().count(); i++) {
                    var layer = currentPage.children().objectAtIndex(i);
                    if (layer.class() == "MSSymbolInstance") {
                        // log(">>>>>>" + layer.name());

                        // if (layer.symbolID() == symbolMaster.symbolID()) {
                        //     layer.select_byExpandingSelection(true, true);
                        //     if (layer.isVisible() == false) {
                        //         layer.setIsVisible(true);
                        //     }
                        // } else {

                        // log(isInstanceInsideSymbolMaster(symbolMaster, layer.symbolMaster()));

                            var count = 0;
                            if (isInstanceInsideSymbolMaster(symbolMaster, layer.symbolMaster(), count)) {

                                layer.select_byExpandingSelection(true, true);
                                if (layer.isVisible() == false) {
                                    layer.setIsVisible(true);
                                }

                                log(layer)
                            }


                        // }
                    }
                }

                // Select all instances in other instance



                // Same as CMD + 2
                view.zoomToSelection();

            }
        } else {
            doc.showMessage("The symbol master has no instance.");
        }
    } else {
        doc.showMessage("Please select 1 symbol.");
    }

}

function isInstanceInsideSymbolMaster(instance, symbolMaster, count) {
    var result = false;
    for (var i = 0; i < symbolMaster.children().count(); i++) {
        var layer = symbolMaster.children().objectAtIndex(i);
        if (layer.class() == "MSSymbolInstance") {
            // log(layer);
            if (String(layer.symbolID()) == String(instance.symbolID())) {
                log("<<<<<" + layer.name());
                count ++;
                result = true;
            } else {
                isInstanceInsideSymbolMaster(instance, layer.symbolMaster(), count);
            }
        }
    }
    return result;
}
