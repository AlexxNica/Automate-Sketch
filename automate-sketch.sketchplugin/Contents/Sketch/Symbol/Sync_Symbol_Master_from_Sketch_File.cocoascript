/*----------------------------------------------------------

author: Ashung Hung
Homepage: https://github.com/Ashung/Automate-Sketch
license: CC-BY 4.0

----------------------------------------------------------*/

var onRun = function(context) {

    var document = context.document;
    var documentData = document.documentData();

    // Choose the new sketch file.
    var lastNavPath = NSUserDefaults.standardUserDefaults().stringForKey("NSNavLastRootDirectory");
    var desktopPath = NSHomeDirectory().stringByAppendingPathComponent("Desktop");
    var defaultPath = lastNavPath || desktopPath;
    var chooseFile = NSOpenPanel.openPanel();
        chooseFile.setCanChooseDirectories(false);
        chooseFile.setCanChooseFiles(true);
        chooseFile.setAllowedFileTypes(["sketch"]);
        chooseFile.setDirectoryURL(NSURL.fileURLWithPath(defaultPath));

    if (chooseFile.runModal() == NSOKButton) {

        // Read data from the new sketch file.
        var newDocument = MSDocument.alloc().init();
            newDocument.readFromURL_ofType_error(chooseFile.URL(), "com.bohemiancoding.sketch.drawing", nil);
        var newDocumentData = newDocument.documentData();


        log(documentData.allSymbols().count() + "/" + newDocumentData.allSymbols().count())


        var newSymbolMastersWillAddToDocument = NSMutableArray.alloc().init();

        // Iteration symbolMasters in current document
        var loopSymbolMasters = documentData.allSymbols().objectEnumerator();
        var symbolMaster;
        while (symbolMaster = loopSymbolMasters.nextObject()) {

            // Replace symbolMaster
            // symbolWithID
            var newSymbolMaster = newDocumentData.layerWithID(symbolMaster.objectID());
            if (newSymbolMaster && !newSymbolMastersWillAddToDocument.containsObject(newSymbolMaster)) {

                newSymbolMastersWillAddToDocument.addObject(newSymbolMaster);

                // Nested Symbol in new sketch file
                iterateNestedSymbols(newSymbolMaster);

                    // var page = symbolMaster.parentPage();
                    // symbolMaster.removeFromParent();
                    // page.addLayers([newSymbolMaster]);


                    //
                    function iterateNestedSymbols(_symbolmaster) {
                        var loopSymbolInstance = _symbolmaster.allSymbolInstancesInChildren().objectEnumerator();
                        var symbolInstance;
                        while (symbolInstance = loopSymbolInstance.nextObject()) {

                            var nestedSymbolMaster = symbolInstance.symbolMaster();
                            if (!newSymbolMastersWillAddToDocument.containsObject(nestedSymbolMaster)) {
                                //
                                    // log(nestedSymbolMaster);
                                //

                                    // log(nestedSymbolMaster);
                                //
                                    // var oldSymbolMaster = documentData.layerWithID(nestedSymbolMaster.objectID());
                                    // if (oldSymbolMaster) {
                                    //     page = oldSymbolMaster.parentPage();
                                    //     oldSymbolMaster.removeFromParent();
                                    // }
                                    //
                                    // page.addLayers([nestedSymbolMaster]);

                                newSymbolMastersWillAddToDocument.addObject(nestedSymbolMaster);
                                //
                                //
                                //
                            }

                            iterateNestedSymbols(nestedSymbolMaster);

                        }
                    }




            }


        }

        log(newSymbolMastersWillAddToDocument.count());
        // log(newSymbolMastersWillAddToDocument);

        var loopSymbolMastersWillAddToDocument = newSymbolMastersWillAddToDocument.objectEnumerator();
        var symbolMasterWillAddToDocument;
        while (symbolMasterWillAddToDocument = loopSymbolMastersWillAddToDocument.nextObject()) {
            // log(symbolMasterWillAddToDocument)

            // var page = symbolMaster.parentPage();
            // symbolMaster.removeFromParent();
            // page.addLayers([newSymbolMaster]);

            var oldSymbolMaster = documentData.layerWithID(symbolMasterWillAddToDocument.objectID());
            if (oldSymbolMaster) {
                var page = oldSymbolMaster.parentPage();
                oldSymbolMaster.removeFromParent();
                page.addLayers([symbolMasterWillAddToDocument]);


                // doc.documentData().symbolsPageOrCreateIfNecessary()
            }
            //
            //
        }


// log(layer.parentPage().indexOfLayer(layer))
    }
};

onRun(context);
